import fs from "fs-extra";
import path from "path";
import { fileURLToPath } from "url";
import dotenv from "dotenv";
import OpenAI from "openai";

// Load environment variables (expects OPENAI_API_KEY)
dotenv.config();

if (!process.env.OPENAI_API_KEY) {
  console.error(
    "‚ùå OPENAI_API_KEY not found in environment variables. Please set it before running this script."
  );
  process.exit(1);
}

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

// Paths
const projectRoot = path.join(__dirname, "..");
const localesDir = path.join(projectRoot, "locales");
const contentDir = path.join(projectRoot, "content");
const localesInfoPath = path.join(contentDir, "locales.json");

// Initialize OpenAI
const openai = new OpenAI({ apiKey: process.env.OPENAI_API_KEY });

async function getSupportedLocales() {
  // 1) Try locales.json first (generated by sync-content script)
  try {
    if (await fs.pathExists(localesInfoPath)) {
      const info = await fs.readJson(localesInfoPath);
      if (Array.isArray(info.locales) && info.locales.length) {
        return info.locales;
      }
    }
  } catch {
    // ignore and fallback below
  }

  // 2) Fallback: read directories inside /content
  try {
    if (await fs.pathExists(contentDir)) {
      const dirs = await fs.readdir(contentDir);
      const locales = [];
      for (const dir of dirs) {
        const dirPath = path.join(contentDir, dir);
        const stat = await fs.stat(dirPath);
        if (stat.isDirectory() && dir.length <= 5) {
          locales.push(dir);
        }
      }
      if (locales.length) return locales;
    }
  } catch {
    // ignore and fallback below
  }

  // 3) Ultimate fallback
  return ["en"];
}

async function translateJson(baseObj, targetLocale) {
  const prompt = `Translate the following JSON object's VALUES only from English into the target language (locale: ${targetLocale}).\n\nRequirements:\n1. Preserve all KEYS and the JSON structure.\n2. Return ONLY valid JSON without markdown or code fences.\n3. Keep escape sequences valid.\n\nJSON to translate:\n${JSON.stringify(
    baseObj,
    null,
    2
  )}`;

  const completion = await openai.chat.completions.create({
    model: "gpt-4o",
    messages: [
      { role: "system", content: "You are a professional translator." },
      { role: "user", content: prompt },
    ],
    temperature: 0.3,
  });

  let content = completion.choices[0].message.content.trim();

  // Strip markdown code fence if present
  if (content.startsWith("```")) {
    content = content.replace(/^```[a-zA-Z]*\n/, "").replace(/\n```$/, "");
  }

  try {
    return JSON.parse(content);
  } catch (err) {
    console.error(`‚ùå Failed parsing JSON for locale ${targetLocale}:`, err);
    console.error("Received content:\n", content);
    throw err;
  }
}

async function generateTranslations() {
  // Ensure locales directory exists
  await fs.ensureDir(localesDir);

  // Load base (English) translations
  const basePath = path.join(localesDir, "en.json");
  if (!(await fs.pathExists(basePath))) {
    console.error(
      "‚ùå Base translation 'en.json' not found in locales directory."
    );
    process.exit(1);
  }
  const baseJson = await fs.readJson(basePath);

  // Determine locales to generate
  const allLocales = await getSupportedLocales();
  const targetLocales = allLocales.filter((loc) => loc !== "en");

  console.log(
    `üåê Generating translations for locales: ${targetLocales.join(", ")}`
  );

  for (const locale of targetLocales) {
    const targetPath = path.join(localesDir, `${locale}.json`);

    if (await fs.pathExists(targetPath)) {
      console.log(`‚û°Ô∏è  Skipping ${locale}.json (already exists)`);
      continue;
    }

    try {
      console.log(`üöÄ Translating to ${locale}...`);
      const translated = await translateJson(baseJson, locale);
      await fs.writeJson(targetPath, translated, { spaces: 2 });
      console.log(`‚úÖ Created locales/${locale}.json`);
    } catch (err) {
      console.error(
        `‚ùå Error translating locale ${locale}:`,
        err.message || err
      );
    }
  }

  console.log("\n‚ú® Translation generation complete.");
}

generateTranslations().catch((err) => {
  console.error("Unexpected error:", err);
  process.exit(1);
});
